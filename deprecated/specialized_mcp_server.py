#!/usr/bin/env python3
"""
Serveur MCP pour l'extension sp√©cialis√©e investissement locatif et marchand de biens
"""

import asyncio
import json
import logging
import sys
import os
from typing import Dict, List, Optional, Any

# Ajouter le r√©pertoire src au path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from specialized_investment_mcp import SpecializedRealEstateMCP, InvestmentProfile

# Configuration logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SpecializedMCPServer:
    """Serveur MCP pour les analyses sp√©cialis√©es"""
    
    def __init__(self):
        self.mcp = SpecializedRealEstateMCP()
        self.name = "specialized-real-estate-mcp"
        self.version = "2.0.0"
    
    async def handle_analyze_investment_opportunity(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """Gestionnaire pour l'analyse d'opportunit√©s d'investissement"""
        try:
            # Extraction des param√®tres
            location = params.get('location')
            if not location:
                return {"error": "Le param√®tre 'location' est requis"}
            
            min_price = params.get('min_price')
            max_price = params.get('max_price')
            investment_profile_str = params.get('investment_profile', 'both')
            
            # Conversion du profil d'investissement
            try:
                investment_profile = InvestmentProfile(investment_profile_str)
            except ValueError:
                investment_profile = InvestmentProfile.BOTH
            
            # Autres param√®tres optionnels
            kwargs = {}
            if 'surface_area' in params:
                kwargs['min_surface'] = params['surface_area']
            if 'rooms' in params:
                kwargs['rooms'] = params['rooms']
            if 'property_type' in params:
                kwargs['property_type'] = params['property_type']
            
            # Ex√©cution de l'analyse
            result = await self.mcp.analyze_investment_opportunity(
                location=location,
                min_price=min_price,
                max_price=max_price,
                investment_profile=investment_profile,
                **kwargs
            )
            
            return result
            
        except Exception as e:
            logger.error(f"Erreur dans analyze_investment_opportunity: {e}")
            return {"error": f"Erreur lors de l'analyse: {str(e)}"}
    
    async def handle_compare_investment_strategies(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """Gestionnaire pour la comparaison des strat√©gies"""
        try:
            location = params.get('location')
            property_data = params.get('property_data')
            
            if not location:
                return {"error": "Le param√®tre 'location' est requis"}
            
            if not property_data:
                return {"error": "Le param√®tre 'property_data' est requis"}
            
            result = await self.mcp.compare_investment_strategies(location, property_data)
            return result
            
        except Exception as e:
            logger.error(f"Erreur dans compare_investment_strategies: {e}")
            return {"error": f"Erreur lors de la comparaison: {str(e)}"}
    
    async def handle_get_market_analysis(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """Gestionnaire pour l'analyse de march√© simplifi√©e"""
        try:
            location = params.get('location')
            if not location:
                return {"error": "Le param√®tre 'location' est requis"}
            
            # Analyse rapide avec quelques biens
            result = await self.mcp.analyze_investment_opportunity(
                location=location,
                investment_profile=InvestmentProfile.BOTH
            )
            
            # Retourner seulement le r√©sum√© de march√©
            return {
                "location": location,
                "market_summary": result.get('market_summary', {}),
                "analysis_date": result.get('analysis_date')
            }
            
        except Exception as e:
            logger.error(f"Erreur dans get_market_analysis: {e}")
            return {"error": f"Erreur lors de l'analyse de march√©: {str(e)}"}

# Outils disponibles pour le MCP
SPECIALIZED_TOOLS = [
    {
        "name": "analyze_investment_opportunity",
        "description": "Analyse compl√®te d'opportunit√©s d'investissement immobilier (locatif et/ou marchand de biens) avec calculs de rentabilit√©, estimations de travaux et recommandations personnalis√©es",
        "inputSchema": {
            "type": "object",
            "properties": {
                "location": {
                    "type": "string",
                    "description": "Localisation de recherche (ex: 'Paris 11e', 'Lyon', 'Marseille')"
                },
                "min_price": {
                    "type": "number",
                    "description": "Prix minimum en euros"
                },
                "max_price": {
                    "type": "number",
                    "description": "Prix maximum en euros"
                },
                "investment_profile": {
                    "type": "string",
                    "enum": ["rental_investor", "property_dealer", "both"],
                    "description": "Profil d'investissement: 'rental_investor' pour locatif, 'property_dealer' pour marchand de biens, 'both' pour les deux",
                    "default": "both"
                },
                "surface_area": {
                    "type": "number",
                    "description": "Surface minimale en m¬≤"
                },
                "rooms": {
                    "type": "integer",
                    "description": "Nombre de pi√®ces souhait√©"
                },
                "property_type": {
                    "type": "string",
                    "description": "Type de bien ('appartement', 'maison', 'studio')"
                }
            },
            "required": ["location"]
        }
    },
    {
        "name": "compare_investment_strategies",
        "description": "Compare les strat√©gies d'investissement locatif vs marchand de biens pour un bien sp√©cifique avec analyse d√©taill√©e des rendements et risques",
        "inputSchema": {
            "type": "object",
            "properties": {
                "location": {
                    "type": "string",
                    "description": "Localisation du bien"
                },
                "property_data": {
                    "type": "object",
                    "description": "Donn√©es du bien immobilier (prix, surface, description, etc.)",
                    "properties": {
                        "price": {"type": "number", "description": "Prix du bien en euros"},
                        "surface_area": {"type": "number", "description": "Surface en m¬≤"},
                        "location": {"type": "string", "description": "Localisation"},
                        "description": {"type": "string", "description": "Description du bien"},
                        "property_type": {"type": "string", "description": "Type de bien"},
                        "rooms": {"type": "integer", "description": "Nombre de pi√®ces"}
                    },
                    "required": ["price", "location"]
                }
            },
            "required": ["location", "property_data"]
        }
    },
    {
        "name": "get_market_analysis",
        "description": "Analyse rapide du march√© immobilier d'une zone avec statistiques pour investissement locatif et marchand de biens",
        "inputSchema": {
            "type": "object",
            "properties": {
                "location": {
                    "type": "string",
                    "description": "Zone √† analyser (ville ou arrondissement)"
                }
            },
            "required": ["location"]
        }
    }
]

async def test_server():
    """Test du serveur MCP sp√©cialis√©"""
    print("üöÄ Test du serveur MCP sp√©cialis√©")
    print("=" * 50)
    
    server = SpecializedMCPServer()
    
    # Test 1: Analyse d'opportunit√©s locatives
    print("\n1Ô∏è‚É£ Test analyse opportunit√©s locatives...")
    params1 = {
        "location": "Paris 11e",
        "min_price": 200000,
        "max_price": 400000,
        "investment_profile": "rental_investor"
    }
    
    result1 = await server.handle_analyze_investment_opportunity(params1)
    if "error" not in result1:
        print(f"‚úÖ Analyse r√©ussie: {result1['total_opportunities']} opportunit√©s trouv√©es")
        market = result1.get('market_summary', {}).get('rental_market', {})
        if market:
            print(f"   üìä Rendement net moyen: {market.get('average_net_yield', 0)}%")
    else:
        print(f"‚ùå Erreur: {result1['error']}")
    
    # Test 2: Analyse marchand de biens
    print("\n2Ô∏è‚É£ Test analyse marchand de biens...")
    params2 = {
        "location": "Lyon",
        "min_price": 150000,
        "max_price": 300000,
        "investment_profile": "property_dealer"
    }
    
    result2 = await server.handle_analyze_investment_opportunity(params2)
    if "error" not in result2:
        print(f"‚úÖ Analyse r√©ussie: {result2['total_opportunities']} opportunit√©s trouv√©es")
        market = result2.get('market_summary', {}).get('dealer_market', {})
        if market:
            print(f"   üìä Marge brute moyenne: {market.get('average_gross_margin', 0)}%")
    else:
        print(f"‚ùå Erreur: {result2['error']}")
    
    # Test 3: Comparaison de strat√©gies
    print("\n3Ô∏è‚É£ Test comparaison de strat√©gies...")
    test_property = {
        "price": 280000,
        "surface_area": 55,
        "location": "Paris 20e",
        "description": "Appartement √† r√©nover avec potentiel",
        "property_type": "Appartement",
        "rooms": 3
    }
    
    params3 = {
        "location": "Paris 20e",
        "property_data": test_property
    }
    
    result3 = await server.handle_compare_investment_strategies(params3)
    if "error" not in result3:
        print("‚úÖ Comparaison r√©ussie")
        comp = result3.get('comparison', {})
        print(f"   üè† Rendement locatif: {comp.get('rental_annual_return', 0):.1f}%")
        print(f"   üî® Rendement marchand: {comp.get('dealer_annual_return', 0):.1f}%")
        print(f"   üí° Recommandation: {comp.get('recommendation', 'N/A')}")
    else:
        print(f"‚ùå Erreur: {result3['error']}")
    
    # Test 4: Analyse de march√©
    print("\n4Ô∏è‚É£ Test analyse de march√©...")
    params4 = {"location": "Marseille"}
    
    result4 = await server.handle_get_market_analysis(params4)
    if "error" not in result4:
        print("‚úÖ Analyse de march√© r√©ussie")
        market_summary = result4.get('market_summary', {})
        print(f"   üìç Zone: {result4.get('location')}")
        if 'rental_market' in market_summary:
            rental = market_summary['rental_market']
            print(f"   üè† Locatif - Rendement moyen: {rental.get('average_net_yield', 0)}%")
        if 'dealer_market' in market_summary:
            dealer = market_summary['dealer_market']
            print(f"   üî® Marchand - Marge moyenne: {dealer.get('average_gross_margin', 0)}%")
    else:
        print(f"‚ùå Erreur: {result4['error']}")
    
    print("\nüéØ Tests termin√©s avec succ√®s !")
    print("\nüìã Outils disponibles:")
    for tool in SPECIALIZED_TOOLS:
        print(f"   ‚Ä¢ {tool['name']}: {tool['description']}")

if __name__ == "__main__":
    asyncio.run(test_server())
