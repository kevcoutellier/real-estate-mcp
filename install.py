#!/usr/bin/env python3
"""
Script d'installation automatique pour MCP Real Estate
Configure l'environnement virtuel et les d√©pendances pour Claude Desktop
"""

import os
import sys
import subprocess
import platform
from pathlib import Path


def run_command(command, cwd=None, shell=True):
    """Ex√©cute une commande et retourne le r√©sultat"""
    try:
        result = subprocess.run(
            command,
            cwd=cwd,
            shell=shell,
            capture_output=True,
            text=True,
            encoding='utf-8'
        )
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)


def create_virtual_environment(project_root):
    """Cr√©e l'environnement virtuel"""
    print("üêç Cr√©ation de l'environnement virtuel...")
    
    venv_path = project_root / "venv"
    
    if venv_path.exists():
        print("‚úÖ Environnement virtuel d√©j√† existant")
        return True
    
    # Cr√©er l'environnement virtuel
    success, stdout, stderr = run_command([sys.executable, "-m", "venv", "venv"], cwd=project_root)
    
    if success:
        print("‚úÖ Environnement virtuel cr√©√© avec succ√®s")
        return True
    else:
        print(f"‚ùå Erreur lors de la cr√©ation de l'environnement virtuel: {stderr}")
        return False


def install_dependencies(project_root):
    """Installe les d√©pendances dans l'environnement virtuel"""
    print("üì¶ Installation des d√©pendances...")
    
    # D√©terminer le chemin vers pip dans l'environnement virtuel
    if platform.system() == "Windows":
        pip_path = project_root / "venv" / "Scripts" / "pip.exe"
        python_path = project_root / "venv" / "Scripts" / "python.exe"
    else:
        pip_path = project_root / "venv" / "bin" / "pip"
        python_path = project_root / "venv" / "bin" / "python"
    
    if not pip_path.exists():
        print(f"‚ùå pip introuvable: {pip_path}")
        return False
    
    # Mettre √† jour pip
    success, stdout, stderr = run_command([str(python_path), "-m", "pip", "install", "--upgrade", "pip"], cwd=project_root)
    if not success:
        print(f"‚ö†Ô∏è Avertissement lors de la mise √† jour de pip: {stderr}")
    
    # Installer les d√©pendances
    requirements_file = project_root / "requirements.txt"
    if requirements_file.exists():
        success, stdout, stderr = run_command([str(pip_path), "install", "-r", "requirements.txt"], cwd=project_root)
        if success:
            print("‚úÖ D√©pendances install√©es avec succ√®s")
            return True
        else:
            print(f"‚ùå Erreur lors de l'installation des d√©pendances: {stderr}")
            return False
    else:
        print("‚ö†Ô∏è Fichier requirements.txt introuvable")
        return False


def create_claude_config(project_root):
    """Cr√©e la configuration pour Claude Desktop"""
    print("ü§ñ Configuration pour Claude Desktop...")
    
    # D√©terminer le chemin vers python dans l'environnement virtuel
    if platform.system() == "Windows":
        python_path = project_root / "venv" / "Scripts" / "python.exe"
    else:
        python_path = project_root / "venv" / "bin" / "python"
    
    # Configuration MCP pour Claude Desktop avec environnement virtuel garanti
    claude_config = {
        "mcpServers": {
            "real-estate-mcp": {
                "command": str(python_path),
                "args": [str(project_root / "mcp_wrapper.py")],
                "cwd": str(project_root),
                "env": {
                    "PYTHONPATH": str(project_root / "src"),
                    "VIRTUAL_ENV": str(project_root / "venv")
                }
            }
        }
    }
    
    # Sauvegarder la configuration
    config_file = project_root / "claude_desktop_config.json"
    
    import json
    with open(config_file, 'w', encoding='utf-8') as f:
        json.dump(claude_config, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ Configuration Claude Desktop cr√©√©e: {config_file}")
    return True


def create_startup_scripts(project_root):
    """Cr√©e les scripts de d√©marrage pour diff√©rents OS"""
    print("üìú Cr√©ation des scripts de d√©marrage...")
    
    # Script Windows
    if platform.system() == "Windows":
        bat_content = f"""@echo off
cd /d "{project_root}"
call venv\\Scripts\\activate.bat
python start_server.py
pause
"""
        with open(project_root / "start_mcp.bat", 'w', encoding='utf-8') as f:
            f.write(bat_content)
        print("‚úÖ Script Windows cr√©√©: start_mcp.bat")
    
    # Script Unix/Linux/Mac
    sh_content = f"""#!/bin/bash
cd "{project_root}"
source venv/bin/activate
python start_server.py
"""
    with open(project_root / "start_mcp.sh", 'w', encoding='utf-8') as f:
        f.write(sh_content)
    
    # Rendre le script ex√©cutable sur Unix
    if platform.system() != "Windows":
        os.chmod(project_root / "start_mcp.sh", 0o755)
        print("‚úÖ Script Unix cr√©√©: start_mcp.sh")
    
    return True


def test_installation(project_root):
    """Teste l'installation"""
    print("üß™ Test de l'installation...")
    
    # D√©terminer le chemin vers python dans l'environnement virtuel
    if platform.system() == "Windows":
        python_path = project_root / "venv" / "Scripts" / "python.exe"
    else:
        python_path = project_root / "venv" / "bin" / "python"
    
    # Test d'import
    test_command = [
        str(python_path), "-c",
        "import sys; sys.path.insert(0, 'src'); from mcp_server import MCPRealEstateServer; print('‚úÖ Import r√©ussi')"
    ]
    
    success, stdout, stderr = run_command(test_command, cwd=project_root)
    
    if success:
        print("‚úÖ Test d'installation r√©ussi")
        return True
    else:
        print(f"‚ùå Test d'installation √©chou√©: {stderr}")
        return False


def main():
    """Fonction principale d'installation"""
    print("üöÄ INSTALLATION MCP REAL ESTATE POUR CLAUDE DESKTOP")
    print("=" * 60)
    
    project_root = Path(__file__).parent
    print(f"üìÅ Dossier du projet: {project_root}")
    
    steps = [
        ("Environnement virtuel", lambda: create_virtual_environment(project_root)),
        ("D√©pendances", lambda: install_dependencies(project_root)),
        ("Configuration Claude", lambda: create_claude_config(project_root)),
        ("Scripts de d√©marrage", lambda: create_startup_scripts(project_root)),
        ("Test installation", lambda: test_installation(project_root))
    ]
    
    success_count = 0
    
    for step_name, step_func in steps:
        print(f"\nüìã √âtape: {step_name}")
        print("-" * 30)
        
        if step_func():
            success_count += 1
        else:
            print(f"‚ùå √âchec de l'√©tape: {step_name}")
    
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DE L'INSTALLATION")
    print("=" * 60)
    
    if success_count == len(steps):
        print("üéâ INSTALLATION R√âUSSIE !")
        print("\nüìñ Instructions pour Claude Desktop:")
        print(f"1. Copiez le contenu de 'claude_desktop_config.json'")
        print(f"2. Ajoutez-le √† votre configuration Claude Desktop")
        print(f"3. Red√©marrez Claude Desktop")
        print(f"4. Le MCP 'real-estate-mcp' sera disponible")
        
        print("\nüöÄ Test manuel:")
        if platform.system() == "Windows":
            print(f"   Double-cliquez sur 'start_mcp.bat'")
        else:
            print(f"   Ex√©cutez './start_mcp.sh'")
        
        print("\nüîó Configuration GitHub:")
        print("   Le projet est pr√™t pour √™tre pouss√© sur GitHub")
        print("   Les utilisateurs pourront cloner et installer avec 'python install.py'")
        
    else:
        print(f"‚ö†Ô∏è Installation partielle: {success_count}/{len(steps)} √©tapes r√©ussies")
        print("üîß V√©rifiez les erreurs ci-dessus et relancez l'installation")
    
    return success_count == len(steps)


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
