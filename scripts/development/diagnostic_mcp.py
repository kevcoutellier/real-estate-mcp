#!/usr/bin/env python3
"""
Diagnostic complet du syst√®me MCP immobilier
Ce script identifie pr√©cis√©ment pourquoi le syst√®me utilise des donn√©es de d√©monstration
"""

import asyncio
import sys
import os
import importlib.util
import httpx
from datetime import datetime

# Ajouter le r√©pertoire source au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

class MCPDiagnostic:
    """Classe pour diagnostiquer les probl√®mes du syst√®me MCP"""
    
    def __init__(self):
        self.issues_found = []
        self.success_count = 0
        self.total_tests = 0
        
    async def run_complete_diagnosis(self):
        """Lance un diagnostic complet du syst√®me"""
        print("üîç DIAGNOSTIC COMPLET DU SYST√àME MCP IMMOBILIER")
        print("=" * 60)
        print("Ce diagnostic va identifier pourquoi vous obtenez des donn√©es de d√©monstration")
        print("au lieu de vraies annonces immobili√®res.\n")
        
        # Tests s√©quentiels avec explications d√©taill√©es
        await self._test_dependencies()
        await self._test_network_connectivity()
        await self._test_api_accessibility()
        await self._test_scraper_functionality()
        await self._test_ssl_configuration()
        await self._test_enrichment_services()
        
        # Rapport final avec recommandations
        await self._generate_final_report()
    
    async def _test_dependencies(self):
        """Teste la disponibilit√© de toutes les d√©pendances"""
        print("üì¶ TEST 1: V√©rification des d√©pendances")
        print("-" * 40)
        
        dependencies = [
            ('httpx', 'Client HTTP pour les requ√™tes API'),
            ('beautifulsoup4', 'Parser HTML pour le scraping'),
            ('geopy', 'Service de g√©ocodage'),
            ('playwright', 'Navigateur automatis√© pour JavaScript'),
            ('ssl', 'Gestion des certificats SSL')
        ]
        
        for dep_name, description in dependencies:
            self.total_tests += 1
            try:
                if dep_name == 'beautifulsoup4':
                    import bs4
                    print(f"  ‚úÖ BeautifulSoup4 - {description}")
                    self.success_count += 1
                elif dep_name == 'ssl':
                    import ssl
                    print(f"  ‚úÖ SSL - {description}")
                    self.success_count += 1
                else:
                    importlib.import_module(dep_name)
                    print(f"  ‚úÖ {dep_name} - {description}")
                    self.success_count += 1
            except ImportError as e:
                print(f"  ‚ùå {dep_name} - MANQUANT: {description}")
                self.issues_found.append(f"D√©pendance manquante: {dep_name}")
                print(f"     üí° Solution: pip install {dep_name}")
        
        print()
    
    async def _test_network_connectivity(self):
        """Teste la connectivit√© r√©seau de base"""
        print("üåê TEST 2: Connectivit√© r√©seau")
        print("-" * 40)
        
        test_urls = [
            ('https://httpbin.org/status/200', 'Test de connectivit√© HTTP g√©n√©rale'),
            ('https://api.leboncoin.fr', 'Accessibilit√© du domaine LeBonCoin'),
            ('https://www.seloger.com', 'Accessibilit√© du domaine SeLoger'),
            ('https://api-adresse.data.gouv.fr', 'API de g√©ocodage fran√ßaise')
        ]
        
        async with httpx.AsyncClient(timeout=10.0, verify=False) as client:
            for url, description in test_urls:
                self.total_tests += 1
                try:
                    response = await client.get(url)
                    if response.status_code < 400:
                        print(f"  ‚úÖ {description} - Accessible")
                        self.success_count += 1
                    else:
                        print(f"  ‚ö†Ô∏è {description} - Code {response.status_code}")
                        self.issues_found.append(f"Probl√®me d'acc√®s: {url}")
                except Exception as e:
                    print(f"  ‚ùå {description} - Erreur: {str(e)[:50]}...")
                    self.issues_found.append(f"Connectivit√© √©chou√©e: {url}")
        
        print()
    
    async def _test_api_accessibility(self):
        """Teste l'accessibilit√© des APIs sp√©cifiques"""
        print("üîå TEST 3: Accessibilit√© des APIs")
        print("-" * 40)
        
        # Test API LeBonCoin
        self.total_tests += 1
        try:
            async with httpx.AsyncClient(timeout=15.0, verify=False) as client:
                payload = {
                    "filters": {
                        "category": {"id": "9"},
                        "enums": {"ad_type": ["offer"]},
                        "location": {"locations": [{"label": "Paris"}]},
                        "ranges": {}
                    },
                    "limit": 5
                }
                
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
                
                response = await client.post(
                    "https://api.leboncoin.fr/finder/search",
                    json=payload,
                    headers=headers
                )
                
                if response.status_code == 200:
                    data = response.json()
                    ads_count = len(data.get('ads', []))
                    print(f"  ‚úÖ API LeBonCoin - Fonctionne ({ads_count} annonces trouv√©es)")
                    self.success_count += 1
                elif response.status_code == 403:
                    print(f"  üö´ API LeBonCoin - Bloqu√©e (Code 403: Acc√®s refus√©)")
                    self.issues_found.append("LeBonCoin bloque les requ√™tes API")
                elif response.status_code == 429:
                    print(f"  ‚è∞ API LeBonCoin - Rate limit (Code 429: Trop de requ√™tes)")
                    self.issues_found.append("LeBonCoin applique un rate limiting")
                else:
                    print(f"  ‚ùå API LeBonCoin - Code {response.status_code}")
                    self.issues_found.append(f"LeBonCoin retourne le code {response.status_code}")
                    
        except Exception as e:
            print(f"  ‚ùå API LeBonCoin - Erreur: {str(e)[:60]}...")
            self.issues_found.append(f"Erreur API LeBonCoin: {str(e)[:100]}")
        
        # Test API g√©ocodage
        self.total_tests += 1
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(
                    "https://api-adresse.data.gouv.fr/search/",
                    params={'q': 'Paris 11e', 'limit': 1}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    features = data.get('features', [])
                    if features:
                        print(f"  ‚úÖ API G√©ocodage - Fonctionne")
                        self.success_count += 1
                    else:
                        print(f"  ‚ö†Ô∏è API G√©ocodage - Aucun r√©sultat")
                        self.issues_found.append("G√©ocodage ne retourne pas de r√©sultats")
                else:
                    print(f"  ‚ùå API G√©ocodage - Code {response.status_code}")
                    self.issues_found.append("Probl√®me API g√©ocodage")
                    
        except Exception as e:
            print(f"  ‚ùå API G√©ocodage - Erreur: {str(e)[:50]}...")
            self.issues_found.append("Erreur g√©ocodage")
        
        print()
    
    async def _test_scraper_functionality(self):
        """Teste le fonctionnement r√©el des scrapers"""
        print("üï∑Ô∏è TEST 4: Fonctionnement des scrapers")
        print("-" * 40)
        
        try:
            # Import du syst√®me MCP
            from main import LeBonCoinScraper, SeLogerScraper
            
            # Test LeBonCoin Scraper
            self.total_tests += 1
            leboncoin = LeBonCoinScraper()
            search_params = {
                'location': 'Paris 11e',
                'min_price': 1000,
                'max_price': 2000,
                'transaction_type': 'rent'
            }
            
            print("  üîç Test du scraper LeBonCoin...")
            results_lbc = await leboncoin.search(search_params)
            
            if results_lbc:
                # V√©rifier si ce sont de vraies donn√©es ou des donn√©es de test
                real_data_count = sum(1 for r in results_lbc if 'test' not in r.source.lower())
                test_data_count = len(results_lbc) - real_data_count
                
                if real_data_count > 0:
                    print(f"    ‚úÖ LeBonCoin - {real_data_count} vraies annonces + {test_data_count} tests")
                    self.success_count += 1
                else:
                    print(f"    ‚ö†Ô∏è LeBonCoin - Seulement {test_data_count} donn√©es de test")
                    self.issues_found.append("LeBonCoin utilise uniquement des donn√©es de test")
            else:
                print(f"    ‚ùå LeBonCoin - Aucun r√©sultat")
                self.issues_found.append("LeBonCoin ne retourne aucun r√©sultat")
            
            # Test SeLoger Scraper
            self.total_tests += 1
            try:
                seloger = SeLogerScraper()
                print("  üîç Test du scraper SeLoger...")
                results_seloger = await seloger.search(search_params)
                
                if results_seloger:
                    real_data_seloger = sum(1 for r in results_seloger if 'test' not in r.source.lower())
                    if real_data_seloger > 0:
                        print(f"    ‚úÖ SeLoger - {real_data_seloger} vraies annonces")
                        self.success_count += 1
                    else:
                        print(f"    ‚ö†Ô∏è SeLoger - Mode test uniquement")
                        self.issues_found.append("SeLoger utilise uniquement des donn√©es de test")
                else:
                    print(f"    ‚ùå SeLoger - Aucun r√©sultat")
                    self.issues_found.append("SeLoger ne retourne aucun r√©sultat")
                    
            except Exception as e:
                print(f"    ‚ùå SeLoger - Erreur: {str(e)[:50]}...")
                self.issues_found.append(f"Erreur SeLoger: {str(e)[:100]}")
            
        except ImportError as e:
            print(f"  ‚ùå Impossible d'importer les scrapers: {e}")
            self.issues_found.append("Probl√®me d'import des scrapers")
        
        print()
    
    async def _test_ssl_configuration(self):
        """Teste la configuration SSL"""
        print("üîí TEST 5: Configuration SSL")
        print("-" * 40)
        
        self.total_tests += 1
        try:
            import ssl
            
            # Test avec v√©rification SSL activ√©e
            try:
                async with httpx.AsyncClient(timeout=10.0, verify=True) as client:
                    response = await client.get("https://httpbin.org/status/200")
                    print("  ‚úÖ SSL avec v√©rification - Fonctionne")
                    self.success_count += 1
            except Exception as e:
                print(f"  ‚ö†Ô∏è SSL avec v√©rification - Probl√®me: {str(e)[:50]}...")
                print("    üí° Votre syst√®me utilise verify=False pour contourner ce probl√®me")
                self.issues_found.append("Probl√®mes de certificats SSL")
                
        except Exception as e:
            print(f"  ‚ùå Configuration SSL - Erreur: {e}")
            self.issues_found.append("Probl√®me de configuration SSL")
        
        print()
    
    async def _test_enrichment_services(self):
        """Teste les services d'enrichissement g√©ographique"""
        print("üó∫Ô∏è TEST 6: Services d'enrichissement")
        print("-" * 40)
        
        try:
            from main import GeocodingService
            
            geocoding = GeocodingService()
            
            # Test g√©ocodage
            self.total_tests += 1
            coords = await geocoding.geocode_address("Place de la R√©publique, Paris")
            
            if coords and 'lat' in coords and 'lon' in coords:
                print(f"  ‚úÖ G√©ocodage - Fonctionne ({coords['lat']:.4f}, {coords['lon']:.4f})")
                self.success_count += 1
                
                # Test enrichissement quartier
                self.total_tests += 1
                try:
                    neighborhood = await geocoding.get_neighborhood_info(coords)
                    if neighborhood and neighborhood.get('score', 0) > 0:
                        print(f"  ‚úÖ Enrichissement quartier - Score: {neighborhood.get('score', 'N/A')}")
                        self.success_count += 1
                    else:
                        print(f"  ‚ö†Ô∏è Enrichissement quartier - Donn√©es limit√©es")
                        self.issues_found.append("Enrichissement quartier incomplet")
                except Exception as e:
                    print(f"  ‚ùå Enrichissement quartier - Erreur: {str(e)[:50]}...")
                    self.issues_found.append("Erreur enrichissement quartier")
            else:
                print(f"  ‚ùå G√©ocodage - √âchec")
                self.issues_found.append("G√©ocodage ne fonctionne pas")
                
        except ImportError as e:
            print(f"  ‚ùå Services d'enrichissement non disponibles: {e}")
            self.issues_found.append("Services d'enrichissement non importables")
        
        print()
    
    async def _generate_final_report(self):
        """G√©n√®re un rapport final avec des recommandations"""
        print("üìä RAPPORT FINAL DE DIAGNOSTIC")
        print("=" * 60)
        
        # Statistiques globales
        success_rate = (self.success_count / self.total_tests) * 100 if self.total_tests > 0 else 0
        print(f"Score global: {self.success_count}/{self.total_tests} tests r√©ussis ({success_rate:.1f}%)")
        print()
        
        # Classification des probl√®mes
        if not self.issues_found:
            print("üéâ EXCELLENT ! Aucun probl√®me d√©tect√©.")
            print("Votre syst√®me devrait fonctionner avec de vraies donn√©es.")
            print("Si vous obtenez encore des donn√©es de test, c'est probablement")
            print("un choix de configuration plut√¥t qu'un probl√®me technique.")
        else:
            print("üîç PROBL√àMES IDENTIFI√âS:")
            print()
            
            # Cat√©goriser les probl√®mes
            critical_issues = []
            warning_issues = []
            
            for issue in self.issues_found:
                if any(keyword in issue.lower() for keyword in ['manquant', 'bloqu√©e', 'aucun r√©sultat']):
                    critical_issues.append(issue)
                else:
                    warning_issues.append(issue)
            
            if critical_issues:
                print("‚ùå PROBL√àMES CRITIQUES (bloquent les vraies donn√©es):")
                for i, issue in enumerate(critical_issues, 1):
                    print(f"   {i}. {issue}")
                print()
            
            if warning_issues:
                print("‚ö†Ô∏è AVERTISSEMENTS (peuvent affecter les performances):")
                for i, issue in enumerate(warning_issues, 1):
                    print(f"   {i}. {issue}")
                print()
            
            # Recommandations sp√©cifiques
            print("üí° RECOMMANDATIONS POUR ACTIVER LES VRAIES DONN√âES:")
            print()
            
            if any('manquant' in issue for issue in self.issues_found):
                print("1. INSTALLER LES D√âPENDANCES MANQUANTES:")
                print("   pip install httpx beautifulsoup4 geopy playwright")
                print("   playwright install chromium")
                print()
            
            if any('bloqu√©e' in issue for issue in self.issues_found):
                print("2. CONTOURNER LES BLOCAGES D'API:")
                print("   - Utiliser des proxies rotatifs")
                print("   - Impl√©menter des d√©lais entre requ√™tes")
                print("   - Utiliser Playwright avec des User-Agents vari√©s")
                print("   - Consid√©rer des solutions d'API payantes")
                print()
            
            if any('ssl' in issue.lower() for issue in self.issues_found):
                print("3. R√âSOUDRE LES PROBL√àMES SSL:")
                print("   - Votre syst√®me utilise d√©j√† verify=False comme contournement")
                print("   - Pour la production, consid√©rez configurer les certificats")
                print()
            
            print("4. ACTIVATION IMM√âDIATE MODE R√âEL:")
            print("   Si les APIs sont accessibles, modifiez votre code pour:")
            print("   - R√©duire les timeouts pour d√©tecter plus vite les √©checs")
            print("   - Ajuster les User-Agents pour √©viter la d√©tection")
            print("   - Impl√©menter un retry intelligent")
        
        print()
        print("üìà PROCHAINES √âTAPES RECOMMAND√âES:")
        
        if success_rate > 80:
            print("1. Votre syst√®me est en excellent √©tat !")
            print("2. Ajustez les param√®tres des scrapers pour forcer le mode r√©el")
            print("3. Impl√©mentez des m√©triques pour monitorer le taux de succ√®s")
        elif success_rate > 60:
            print("1. R√©solvez les probl√®mes critiques identifi√©s")
            print("2. Testez individuellement chaque scraper")
            print("3. Impl√©mentez un mode fallback gracieux")
        else:
            print("1. Priorit√© sur les d√©pendances et la connectivit√©")
            print("2. Consid√©rez une approche alternative (scraping HTML)")
            print("3. D√©veloppez en mode test puis activez progressivement")
        
        print()
        print("üîÑ Pour relancer ce diagnostic: python diagnostic_mcp.py")

# Point d'entr√©e
async def main():
    """Lance le diagnostic complet"""
    diagnostic = MCPDiagnostic()
    await diagnostic.run_complete_diagnosis()

if __name__ == "__main__":
    asyncio.run(main())