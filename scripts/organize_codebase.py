#!/usr/bin/env python3
"""
Script d'organisation finale de la codebase MCP Real Estate
Nettoie et optimise la structure du projet selon les bonnes pratiques
"""

import os
import shutil
import sys
from pathlib import Path

def get_project_root():
    """Trouve la racine du projet"""
    current = Path(__file__).parent.parent
    return current

def organize_root_files():
    """Organise les fichiers √† la racine du projet"""
    root = get_project_root()
    
    # Fichiers √† d√©placer vers des dossiers appropri√©s
    moves = {
        # Tests √† d√©placer
        'test_mcp_complete.py': 'tests/',
        'test_mcp_quick.py': 'tests/',
        'test_mcp_tools.py': 'tests/',
        
        # Logs √† nettoyer
        'mcp_server.log': 'logs/',
        
        # Scripts de d√©marrage √† organiser
        'start_mcp.bat': 'scripts/start/',
        'start_mcp.sh': 'scripts/start/',
        'run_with_venv.bat': 'scripts/start/',
        'run_with_venv.sh': 'scripts/start/',
        
        # Configuration √† centraliser
        'claude_desktop_config.json': 'config/',
        'claude_desktop_config_portable.json': 'config/',
    }
    
    # Cr√©er les dossiers n√©cessaires
    for target_dir in set(os.path.dirname(target) for target in moves.values()):
        target_path = root / target_dir
        target_path.mkdir(parents=True, exist_ok=True)
    
    # Effectuer les d√©placements
    moved_files = []
    for source, target in moves.items():
        source_path = root / source
        target_path = root / target / source
        
        if source_path.exists() and not target_path.exists():
            try:
                shutil.move(str(source_path), str(target_path))
                moved_files.append(f"{source} ‚Üí {target}")
            except Exception as e:
                print(f"Erreur lors du d√©placement de {source}: {e}")
    
    return moved_files

def clean_pycache():
    """Nettoie tous les dossiers __pycache__"""
    root = get_project_root()
    cleaned = []
    
    for pycache_dir in root.rglob("__pycache__"):
        if pycache_dir.is_dir():
            try:
                shutil.rmtree(pycache_dir)
                cleaned.append(str(pycache_dir.relative_to(root)))
            except Exception as e:
                print(f"Erreur lors du nettoyage de {pycache_dir}: {e}")
    
    return cleaned

def organize_scripts():
    """Organise les scripts par cat√©gorie"""
    root = get_project_root()
    scripts_dir = root / "scripts"
    
    # Cat√©gories de scripts
    categories = {
        'validation': [
            'validate_github_ready.py',
            'validate_hardcoded_removal.py',
            'validate_no_demo_data.py',
            'validate_organization.py',
            'validate_real_data.py'
        ],
        'testing': [
            'test_antibes_fix.py',
            'test_antibes_search.py',
            'test_dynamic_service.py',
            'test_dynamic_vs_static.py'
        ],
        'maintenance': [
            'cleanup.py',
            'cleanup_project.py',
            'force_mcp_restart.py',
            'restart_mcp_dynamic.py',
            'restart_mcp_server.py'
        ],
        'development': [
            'diagnostic_mcp.py',
            'ai_conversation_simulator.py',
            'entreprise_friendly_activator.py'
        ],
        'installation': [
            'auto_install_seloger.py',
            'activate_dynamic.py'
        ]
    }
    
    # Cr√©er les sous-dossiers
    organized = []
    for category in categories.keys():
        category_dir = scripts_dir / category
        category_dir.mkdir(exist_ok=True)
        
        # D√©placer les scripts
        for script in categories[category]:
            source = scripts_dir / script
            target = category_dir / script
            
            if source.exists() and not target.exists():
                try:
                    shutil.move(str(source), str(target))
                    organized.append(f"{script} ‚Üí scripts/{category}/")
                except Exception as e:
                    print(f"Erreur lors du d√©placement de {script}: {e}")
    
    return organized

def create_missing_init_files():
    """Cr√©e les fichiers __init__.py manquants"""
    root = get_project_root()
    created = []
    
    # Dossiers qui doivent avoir un __init__.py
    python_dirs = [
        'src',
        'src/models',
        'src/services',
        'src/utils',
        'src/mcp',
        'src/scrapers',
        'tests'
    ]
    
    for dir_path in python_dirs:
        full_path = root / dir_path
        init_file = full_path / "__init__.py"
        
        if full_path.exists() and not init_file.exists():
            init_file.write_text('"""Package initialization file."""\n')
            created.append(str(init_file.relative_to(root)))
    
    return created

def update_gitignore():
    """Met √† jour le .gitignore avec les patterns appropri√©s"""
    root = get_project_root()
    gitignore_path = root / ".gitignore"
    
    additional_patterns = [
        "",
        "# Organisation patterns",
        "logs/*.log",
        "*.tmp",
        "*.bak",
        ".DS_Store",
        "Thumbs.db",
        "",
        "# IDE files",
        ".vscode/",
        ".idea/",
        "*.swp",
        "*.swo",
        "",
        "# Cache directories",
        ".pytest_cache/",
        ".coverage",
        "htmlcov/",
        "",
        "# Temporary files",
        "temp/",
        "tmp/",
        "*.temp"
    ]
    
    if gitignore_path.exists():
        current_content = gitignore_path.read_text()
        
        # Ajouter les nouveaux patterns s'ils n'existent pas
        new_patterns = []
        for pattern in additional_patterns:
            if pattern and pattern not in current_content:
                new_patterns.append(pattern)
        
        if new_patterns:
            with open(gitignore_path, 'a', encoding='utf-8') as f:
                f.write('\n'.join(new_patterns))
            return len(new_patterns)
    
    return 0

def create_organization_summary():
    """Cr√©e un r√©sum√© de l'organisation finale"""
    root = get_project_root()
    summary_path = root / "CODEBASE_ORGANIZATION.md"
    
    content = """# Organisation de la Codebase MCP Real Estate

## üìÅ Structure Finale

### Dossiers Principaux
```
real-estate-MCP/
‚îú‚îÄ‚îÄ src/                    # Code source principal
‚îÇ   ‚îú‚îÄ‚îÄ main.py            # MCP unifi√© principal
‚îÇ   ‚îú‚îÄ‚îÄ mcp_server.py      # Serveur MCP moderne
‚îÇ   ‚îú‚îÄ‚îÄ models/            # Mod√®les de donn√©es
‚îÇ   ‚îú‚îÄ‚îÄ services/          # Services m√©tier
‚îÇ   ‚îú‚îÄ‚îÄ utils/             # Utilitaires
‚îÇ   ‚îî‚îÄ‚îÄ scrapers/          # Scrapers de donn√©es
‚îú‚îÄ‚îÄ config/                # Configuration
‚îú‚îÄ‚îÄ scripts/               # Scripts utilitaires organis√©s
‚îÇ   ‚îú‚îÄ‚îÄ validation/        # Scripts de validation
‚îÇ   ‚îú‚îÄ‚îÄ testing/          # Scripts de test
‚îÇ   ‚îú‚îÄ‚îÄ maintenance/      # Scripts de maintenance
‚îÇ   ‚îú‚îÄ‚îÄ development/      # Scripts de d√©veloppement
‚îÇ   ‚îî‚îÄ‚îÄ start/            # Scripts de d√©marrage
‚îú‚îÄ‚îÄ tests/                 # Tests unitaires
‚îú‚îÄ‚îÄ docs/                  # Documentation
‚îú‚îÄ‚îÄ examples/              # Exemples d'utilisation
‚îú‚îÄ‚îÄ logs/                  # Fichiers de logs
‚îú‚îÄ‚îÄ data/                  # Donn√©es de r√©f√©rence
‚îú‚îÄ‚îÄ deprecated/            # Code obsol√®te
‚îî‚îÄ‚îÄ archive/               # Anciennes versions
```

### Points d'Entr√©e
- **mcp_real_estate_server.py** : Serveur MCP principal (production)
- **start_server.py** : D√©marrage simplifi√©
- **install.py** : Installation automatique

### Scripts Organis√©s
- **validation/** : Validation de la codebase
- **testing/** : Tests sp√©cialis√©s
- **maintenance/** : Nettoyage et maintenance
- **development/** : Outils de d√©veloppement
- **start/** : Scripts de d√©marrage

## üéØ Avantages de cette Organisation

### Clart√©
- Structure modulaire claire
- S√©paration des responsabilit√©s
- Navigation intuitive

### Maintenabilit√©
- Code organis√© par fonction
- Documentation centralis√©e
- Scripts cat√©goris√©s

### √âvolutivit√©
- Architecture extensible
- Ajout facile de nouveaux modules
- Compatibilit√© pr√©serv√©e

## üöÄ Utilisation

### D√©marrage Rapide
```bash
python mcp_real_estate_server.py
```

### D√©veloppement
```bash
python src/mcp_server.py
```

### Tests
```bash
python -m pytest tests/
```

### Maintenance
```bash
python scripts/maintenance/cleanup.py
```

Cette organisation garantit une codebase professionnelle, maintenable et √©volutive.
"""
    
    summary_path.write_text(content, encoding='utf-8')
    return str(summary_path.relative_to(root))

def main():
    """Fonction principale d'organisation"""
    print("üîß Organisation de la codebase MCP Real Estate...")
    print("=" * 50)
    
    # 1. Nettoyer les caches
    print("\n1. Nettoyage des caches...")
    cleaned_cache = clean_pycache()
    if cleaned_cache:
        print(f"   ‚úÖ {len(cleaned_cache)} dossiers __pycache__ nettoy√©s")
    else:
        print("   ‚úÖ Aucun cache √† nettoyer")
    
    # 2. Organiser les fichiers racine
    print("\n2. Organisation des fichiers racine...")
    moved_files = organize_root_files()
    if moved_files:
        for move in moved_files:
            print(f"   ‚úÖ {move}")
    else:
        print("   ‚úÖ Fichiers racine d√©j√† organis√©s")
    
    # 3. Organiser les scripts
    print("\n3. Organisation des scripts...")
    organized_scripts = organize_scripts()
    if organized_scripts:
        for script in organized_scripts:
            print(f"   ‚úÖ {script}")
    else:
        print("   ‚úÖ Scripts d√©j√† organis√©s")
    
    # 4. Cr√©er les fichiers __init__.py
    print("\n4. Cr√©ation des fichiers __init__.py...")
    created_init = create_missing_init_files()
    if created_init:
        for init_file in created_init:
            print(f"   ‚úÖ {init_file}")
    else:
        print("   ‚úÖ Tous les fichiers __init__.py existent")
    
    # 5. Mettre √† jour .gitignore
    print("\n5. Mise √† jour du .gitignore...")
    new_patterns = update_gitignore()
    if new_patterns > 0:
        print(f"   ‚úÖ {new_patterns} nouveaux patterns ajout√©s")
    else:
        print("   ‚úÖ .gitignore d√©j√† √† jour")
    
    # 6. Cr√©er le r√©sum√© d'organisation
    print("\n6. Cr√©ation du r√©sum√© d'organisation...")
    summary_file = create_organization_summary()
    print(f"   ‚úÖ {summary_file} cr√©√©")
    
    print("\n" + "=" * 50)
    print("üéâ Organisation termin√©e avec succ√®s !")
    print("\nüìã R√©sum√© des actions :")
    print(f"   ‚Ä¢ Caches nettoy√©s : {len(cleaned_cache)}")
    print(f"   ‚Ä¢ Fichiers d√©plac√©s : {len(moved_files)}")
    print(f"   ‚Ä¢ Scripts organis√©s : {len(organized_scripts)}")
    print(f"   ‚Ä¢ Fichiers __init__.py cr√©√©s : {len(created_init)}")
    print(f"   ‚Ä¢ Patterns .gitignore ajout√©s : {new_patterns}")
    print(f"   ‚Ä¢ Documentation cr√©√©e : {summary_file}")
    
    print("\nüöÄ La codebase est maintenant parfaitement organis√©e !")

if __name__ == "__main__":
    main()
