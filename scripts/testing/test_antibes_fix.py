#!/usr/bin/env python3
"""
Test sp√©cifique pour Antibes avec g√©olocalisation corrig√©e
"""

import sys
import os
import asyncio

# Ajouter le chemin src
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, os.path.join(current_dir, 'src'))

async def test_antibes_search():
    """Test de recherche sp√©cifique pour Antibes"""
    print("üèñÔ∏è Test de recherche sp√©cifique - Antibes")
    print("=" * 50)
    
    try:
        from main import DynamicRealEstateMCP
        
        # Initialiser le MCP dynamique
        mcp = DynamicRealEstateMCP()
        print("‚úÖ MCP dynamique initialis√©")
        
        # Test de g√©olocalisation d'Antibes
        print("\nüìç Test de g√©olocalisation d'Antibes")
        scraper = mcp.aggregator.scrapers['leboncoin']
        coords = await scraper._get_city_coordinates("Antibes")
        
        if coords:
            print(f"‚úÖ Antibes g√©olocalis√©: lat={coords['lat']}, lng={coords['lng']}")
            print(f"   (Coordonn√©es attendues: lat‚âà43.58, lng‚âà7.10)")
        else:
            print("‚ùå √âchec de g√©olocalisation d'Antibes")
            return False
        
        # Test de recherche avec g√©olocalisation
        print("\nüîç Recherche studios 30m¬≤+ √† Antibes (avec g√©olocalisation)")
        
        results = await mcp.search_properties(
            location="Antibes",
            property_type="studio",
            min_surface=30,
            transaction_type="rent"
        )
        
        print(f"üìä Nombre de r√©sultats: {len(results)}")
        
        if results:
            print("\nüéØ R√©sultats trouv√©s:")
            antibes_count = 0
            for i, prop in enumerate(results[:5]):
                location = prop.get('location', 'N/A')
                print(f"\n   {i+1}. {prop.get('title', 'Sans titre')}")
                print(f"      Prix: {prop.get('price', 'N/A')} ‚Ç¨")
                print(f"      Surface: {prop.get('surface_area', 'N/A')} m¬≤")
                print(f"      Lieu: {location}")
                print(f"      Source: {prop.get('source', 'N/A')}")
                
                # V√©rifier si c'est bien √† Antibes ou dans la r√©gion
                if location and ('antibes' in location.lower() or 'cannes' in location.lower() or 'nice' in location.lower() or 'juan' in location.lower()):
                    antibes_count += 1
            
            print(f"\nüìà Analyse des r√©sultats:")
            print(f"   - Total: {len(results)} annonces")
            print(f"   - R√©gion Antibes/C√¥te d'Azur: {antibes_count} annonces")
            print(f"   - Pertinence g√©ographique: {(antibes_count/len(results)*100):.1f}%")
            
            if antibes_count > 0:
                print("‚úÖ G√©olocalisation corrig√©e - r√©sultats pertinents trouv√©s!")
            else:
                print("‚ö†Ô∏è Aucun r√©sultat dans la r√©gion d'Antibes")
                
        else:
            print("‚ö†Ô∏è Aucun r√©sultat trouv√©")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """Fonction principale"""
    print("üöÄ Test de correction g√©olocalisation Antibes")
    print("=" * 50)
    
    success = await test_antibes_search()
    
    if success:
        print("\n‚úÖ Test termin√© avec succ√®s !")
        print("   La g√©olocalisation d'Antibes fonctionne correctement.")
    else:
        print("\n‚ùå √âchec du test de g√©olocalisation.")

if __name__ == "__main__":
    asyncio.run(main())
