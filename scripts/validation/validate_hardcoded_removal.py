#!/usr/bin/env python3
"""
Script de validation de la suppression des donn√©es hardcod√©es
V√©rifie que toutes les donn√©es statiques ont √©t√© supprim√©es du MCP Real Estate
"""

import os
import sys
import re
from pathlib import Path

def check_hardcoded_patterns():
    """V√©rifie les patterns de donn√©es hardcod√©es dans le code"""
    
    print("üîç VALIDATION DE LA SUPPRESSION DES DONN√âES HARDCOD√âES")
    print("=" * 60)
    
    # Fichiers √† v√©rifier
    files_to_check = [
        "src/main.py",
        "src/dynamic_data_service.py"
    ]
    
    # Patterns √† d√©tecter (qui ne devraient plus exister)
    hardcoded_patterns = [
        # Donn√©es de loyers hardcod√©es
        r'"paris":\s*{[^}]*"avg_rent_sqm":\s*\d+',
        r'"lyon":\s*{[^}]*"avg_rent_sqm":\s*\d+',
        r'"marseille":\s*{[^}]*"avg_rent_sqm":\s*\d+',
        
        # Co√ªts de r√©novation hardcod√©s
        r'"rafraichissement":\s*{[^}]*"cost_per_sqm":\s*\d+',
        r'"renovation_complete":\s*{[^}]*"cost_per_sqm":\s*\d+',
        
        # Prix hardcod√©s par ville
        r"'paris':\s*{[^}]*'rent':\s*{[^}]*'avg_sqm':\s*\d+",
        r"'lyon':\s*{[^}]*'rent':\s*{[^}]*'avg_sqm':\s*\d+",
        
        # Descriptions hardcod√©es sp√©cifiques
        r'"Charmant appartement parisien"',
        r'"Appartement r√©nov√© dans immeuble en pierre"',
        r'"Appartement avec vue mer"',
        
        # Quartiers hardcod√©s sp√©cifiques
        r'"11e arr\."',
        r'"Presqu\'√Æle"',
        r'"Vieux-Port"'
    ]
    
    issues_found = []
    
    for file_path in files_to_check:
        if not os.path.exists(file_path):
            print(f"‚ö†Ô∏è Fichier non trouv√©: {file_path}")
            continue
            
        print(f"\nüìÑ V√©rification: {file_path}")
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        file_issues = []
        
        for i, pattern in enumerate(hardcoded_patterns):
            matches = re.findall(pattern, content, re.IGNORECASE)
            if matches:
                file_issues.extend(matches)
                issues_found.append(f"{file_path}: Pattern {i+1} trouv√© - {matches[0][:50]}...")
        
        if file_issues:
            print(f"‚ùå {len(file_issues)} donn√©es hardcod√©es trouv√©es")
        else:
            print("‚úÖ Aucune donn√©e hardcod√©e d√©tect√©e")
    
    return issues_found

def check_method_implementations():
    """V√©rifie que les m√©thodes obsol√®tes l√®vent bien NotImplementedError"""
    
    print(f"\nüîß V√âRIFICATION DES M√âTHODES OBSOL√àTES")
    print("-" * 40)
    
    main_file = "src/main.py"
    
    if not os.path.exists(main_file):
        print(f"‚ùå Fichier non trouv√©: {main_file}")
        return False
    
    with open(main_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # V√©rifier que get_rental_data l√®ve NotImplementedError
    rental_data_pattern = r'def get_rental_data\(.*?\):(.*?)(?=def|\Z)'
    rental_match = re.search(rental_data_pattern, content, re.DOTALL)
    
    if rental_match:
        method_body = rental_match.group(1)
        if 'NotImplementedError' in method_body:
            print("‚úÖ get_rental_data l√®ve NotImplementedError")
        else:
            print("‚ùå get_rental_data ne l√®ve pas NotImplementedError")
            return False
    else:
        print("‚ö†Ô∏è M√©thode get_rental_data non trouv√©e")
    
    # V√©rifier que get_renovation_costs l√®ve NotImplementedError
    renovation_pattern = r'def get_renovation_costs\(.*?\):(.*?)(?=def|\Z)'
    renovation_match = re.search(renovation_pattern, content, re.DOTALL)
    
    if renovation_match:
        method_body = renovation_match.group(1)
        if 'NotImplementedError' in method_body:
            print("‚úÖ get_renovation_costs l√®ve NotImplementedError")
        else:
            print("‚ùå get_renovation_costs ne l√®ve pas NotImplementedError")
            return False
    else:
        print("‚ö†Ô∏è M√©thode get_renovation_costs non trouv√©e")
    
    return True

def check_dynamic_service_exists():
    """V√©rifie que le service dynamique existe"""
    
    print(f"\nüöÄ V√âRIFICATION DU SERVICE DYNAMIQUE")
    print("-" * 40)
    
    dynamic_file = "src/dynamic_data_service.py"
    
    if os.path.exists(dynamic_file):
        print("‚úÖ Service dynamique pr√©sent")
        
        with open(dynamic_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier les fonctions cl√©s
        key_functions = [
            'get_market_data',
            'get_renovation_costs',
            'DynamicDataService'
        ]
        
        for func in key_functions:
            if func in content:
                print(f"‚úÖ {func} pr√©sent")
            else:
                print(f"‚ùå {func} manquant")
                return False
        
        return True
    else:
        print("‚ùå Service dynamique manquant")
        return False

def generate_report():
    """G√©n√®re un rapport de validation"""
    
    print(f"\nüìä RAPPORT DE VALIDATION")
    print("=" * 60)
    
    # V√©rifications
    hardcoded_issues = check_hardcoded_patterns()
    methods_ok = check_method_implementations()
    dynamic_ok = check_dynamic_service_exists()
    
    # R√©sum√©
    print(f"\nüéØ R√âSUM√â")
    print("-" * 20)
    
    if not hardcoded_issues:
        print("‚úÖ Donn√©es hardcod√©es: SUPPRIM√âES")
    else:
        print(f"‚ùå Donn√©es hardcod√©es: {len(hardcoded_issues)} probl√®mes")
        for issue in hardcoded_issues:
            print(f"   - {issue}")
    
    if methods_ok:
        print("‚úÖ M√©thodes obsol√®tes: CORRECTEMENT D√âSACTIV√âES")
    else:
        print("‚ùå M√©thodes obsol√®tes: PROBL√àMES D√âTECT√âS")
    
    if dynamic_ok:
        print("‚úÖ Service dynamique: PR√âSENT")
    else:
        print("‚ùå Service dynamique: MANQUANT")
    
    # Conclusion
    all_ok = not hardcoded_issues and methods_ok and dynamic_ok
    
    print(f"\n{'üéâ' if all_ok else '‚ö†Ô∏è'} CONCLUSION")
    print("-" * 20)
    
    if all_ok:
        print("‚úÖ SUPPRESSION DES DONN√âES HARDCOD√âES: R√âUSSIE")
        print("‚úÖ Le MCP utilise maintenant exclusivement des donn√©es temps r√©el")
        print("‚úÖ Migration vers DynamicRealEstateMCP recommand√©e")
    else:
        print("‚ùå SUPPRESSION INCOMPL√àTE")
        print("‚ö†Ô∏è Certaines donn√©es hardcod√©es subsistent")
        print("üîß Corrections n√©cessaires avant utilisation")
    
    return all_ok

if __name__ == "__main__":
    # Changer vers le r√©pertoire du projet
    script_dir = Path(__file__).parent
    project_dir = script_dir.parent
    os.chdir(project_dir)
    
    # Lancer la validation
    success = generate_report()
    
    # Code de sortie
    sys.exit(0 if success else 1)
