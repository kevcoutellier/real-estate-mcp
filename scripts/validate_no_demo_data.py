#!/usr/bin/env python3
"""
Script de validation : V√©rification de l'absence de donn√©es de d√©monstration
Fichier: scripts/validate_no_demo_data.py

Ce script v√©rifie que toutes les donn√©es de d√©monstration ont √©t√© supprim√©es
du MCP Real Estate selon la demande utilisateur.
"""

import os
import re
import sys
from pathlib import Path

def check_demo_patterns():
    """V√©rifie la pr√©sence de patterns de donn√©es de d√©monstration"""
    
    # Patterns √† rechercher
    demo_patterns = [
        r'demo',
        r'test.*data',
        r'generate.*test',
        r'LeBonCoin.*Demo',
        r'SeLoger.*Demo',
        r'PAP.*Demo',
        r'demonstration',
        r'donnees.*test',
        r'resultats.*demonstration',
        r'example\.com',
        r'test_leboncoin',
        r'test_seloger'
    ]
    
    # Fichiers √† v√©rifier
    files_to_check = [
        'src/main.py',
        'mcp_real_estate_server.py'
    ]
    
    project_root = Path(__file__).parent.parent
    issues_found = []
    
    for file_path in files_to_check:
        full_path = project_root / file_path
        if not full_path.exists():
            continue
            
        print(f"\nüîç V√©rification de {file_path}...")
        
        try:
            with open(full_path, 'r', encoding='utf-8') as f:
                content = f.read()
                lines = content.split('\n')
                
            for i, line in enumerate(lines, 1):
                line_lower = line.lower()
                
                for pattern in demo_patterns:
                    if re.search(pattern, line_lower, re.IGNORECASE):
                        # Ignorer les commentaires qui expliquent la suppression
                        if ('supprim' in line_lower or 'removed' in line_lower or 
                            'deleted' in line_lower or '# ' in line):
                            continue
                            
                        issues_found.append({
                            'file': file_path,
                            'line': i,
                            'content': line.strip(),
                            'pattern': pattern
                        })
                        
        except Exception as e:
            print(f"‚ùå Erreur lecture {file_path}: {e}")
    
    return issues_found

def check_mcp_configuration():
    """V√©rifie que le MCP utilise DynamicRealEstateMCP"""
    
    project_root = Path(__file__).parent.parent
    server_file = project_root / 'mcp_real_estate_server.py'
    
    if not server_file.exists():
        return ["Fichier serveur MCP introuvable"]
    
    issues = []
    
    try:
        with open(server_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier l'import
        if 'from main import DynamicRealEstateMCP' not in content:
            issues.append("Import de DynamicRealEstateMCP manquant")
        
        if 'from main import EnrichedRealEstateMCP' in content:
            issues.append("Import obsol√®te de EnrichedRealEstateMCP trouv√©")
        
        # V√©rifier l'initialisation
        if 'self.mcp = DynamicRealEstateMCP()' not in content:
            issues.append("Initialisation de DynamicRealEstateMCP manquante")
        
        if 'self.mcp = EnrichedRealEstateMCP()' in content:
            issues.append("Initialisation obsol√®te de EnrichedRealEstateMCP trouv√©e")
            
    except Exception as e:
        issues.append(f"Erreur lecture serveur MCP: {e}")
    
    return issues

def main():
    """Fonction principale de validation"""
    
    print("üöÄ VALIDATION : SUPPRESSION DES DONN√âES DE D√âMONSTRATION")
    print("=" * 60)
    
    # V√©rification des patterns de d√©monstration
    print("\nüìã V√©rification des patterns de d√©monstration...")
    demo_issues = check_demo_patterns()
    
    if demo_issues:
        print(f"‚ùå {len(demo_issues)} probl√®mes trouv√©s :")
        for issue in demo_issues:
            print(f"  üìÅ {issue['file']}:{issue['line']}")
            print(f"     Pattern: {issue['pattern']}")
            print(f"     Contenu: {issue['content']}")
            print()
    else:
        print("‚úÖ Aucun pattern de d√©monstration trouv√©")
    
    # V√©rification de la configuration MCP
    print("\nüîß V√©rification de la configuration MCP...")
    config_issues = check_mcp_configuration()
    
    if config_issues:
        print(f"‚ùå {len(config_issues)} probl√®mes de configuration :")
        for issue in config_issues:
            print(f"  ‚Ä¢ {issue}")
    else:
        print("‚úÖ Configuration MCP correcte")
    
    # R√©sum√© final
    total_issues = len(demo_issues) + len(config_issues)
    
    print("\n" + "=" * 60)
    if total_issues == 0:
        print("üéâ VALIDATION R√âUSSIE : Aucune donn√©e de d√©monstration d√©tect√©e")
        print("‚úÖ Le MCP Real Estate utilise exclusivement des donn√©es temps r√©el")
        return 0
    else:
        print(f"‚ùå VALIDATION √âCHOU√âE : {total_issues} probl√®mes d√©tect√©s")
        print("üîß Corrigez les probl√®mes ci-dessus avant de continuer")
        return 1

if __name__ == "__main__":
    sys.exit(main())
