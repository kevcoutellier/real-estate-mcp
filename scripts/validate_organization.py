#!/usr/bin/env python3
"""
Script de validation de l'organisation du projet MCP Real Estate
V√©rifie que tous les composants sont correctement organis√©s
"""

import os
import sys
from pathlib import Path


def validate_organization():
    """Valide l'organisation du projet"""
    
    project_root = Path(__file__).parent.parent
    print("üîç Validation de l'organisation du projet MCP Real Estate...")
    print(f"üìÅ Racine du projet: {project_root}")
    
    # Structure attendue
    expected_structure = {
        "src": {
            "type": "dir",
            "required": True,
            "files": ["__init__.py", "mcp_server.py", "main.py"]
        },
        "src/utils": {
            "type": "dir", 
            "required": True,
            "files": ["__init__.py", "logger.py"]
        },
        "src/models": {
            "type": "dir",
            "required": True,
            "files": ["__init__.py"]
        },
        "src/services": {
            "type": "dir",
            "required": True, 
            "files": ["__init__.py"]
        },
        "src/mcp": {
            "type": "dir",
            "required": True,
            "files": ["__init__.py"]
        },
        "config": {
            "type": "dir",
            "required": True,
            "files": ["mcp-config.json"]
        },
        "scripts": {
            "type": "dir",
            "required": True,
            "files": ["cleanup_project.py", "validate_organization.py"]
        },
        "docs": {
            "type": "dir", 
            "required": True,
            "files": ["PROJECT_ORGANIZATION.md"]
        },
        "logs": {
            "type": "dir",
            "required": True,
            "files": []
        },
        "start_server.py": {
            "type": "file",
            "required": True
        },
        "README.md": {
            "type": "file", 
            "required": True
        },
        "requirements.txt": {
            "type": "file",
            "required": True
        }
    }
    
    errors = []
    warnings = []
    
    print("\nüìã V√©rification de la structure...")
    
    # V√©rifier chaque √©l√©ment
    for path_str, config in expected_structure.items():
        path = project_root / path_str
        
        if config["type"] == "dir":
            if not path.exists():
                if config["required"]:
                    errors.append(f"‚ùå Dossier manquant: {path_str}")
                else:
                    warnings.append(f"‚ö†Ô∏è Dossier optionnel manquant: {path_str}")
            else:
                print(f"‚úÖ Dossier trouv√©: {path_str}")
                
                # V√©rifier les fichiers dans le dossier
                for file_name in config.get("files", []):
                    file_path = path / file_name
                    if not file_path.exists():
                        warnings.append(f"‚ö†Ô∏è Fichier manquant: {path_str}/{file_name}")
                    else:
                        print(f"  ‚úÖ Fichier: {file_name}")
        
        elif config["type"] == "file":
            if not path.exists():
                if config["required"]:
                    errors.append(f"‚ùå Fichier manquant: {path_str}")
                else:
                    warnings.append(f"‚ö†Ô∏è Fichier optionnel manquant: {path_str}")
            else:
                print(f"‚úÖ Fichier trouv√©: {path_str}")
    
    # V√©rifier les imports Python
    print("\nüêç V√©rification des imports Python...")
    
    try:
        sys.path.insert(0, str(project_root / "src"))
        
        # Test import du logger
        from utils.logger import setup_logger
        print("‚úÖ Import utils.logger r√©ussi")
        
        # Test import du serveur MCP
        from mcp_server import MCPRealEstateServer
        print("‚úÖ Import mcp_server r√©ussi")
        
        # Test du point d'entr√©e
        sys.path.insert(0, str(project_root))
        import start_server
        print("‚úÖ Import start_server r√©ussi")
        
    except ImportError as e:
        errors.append(f"‚ùå Erreur d'import: {e}")
    
    # V√©rifier la configuration
    print("\n‚öôÔ∏è V√©rification de la configuration...")
    
    config_file = project_root / "config" / "mcp-config.json"
    if config_file.exists():
        try:
            import json
            with open(config_file, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
            
            if config_data.get("main") == "start_server.py":
                print("‚úÖ Configuration MCP mise √† jour")
            else:
                warnings.append("‚ö†Ô∏è Configuration MCP non mise √† jour")
                
        except json.JSONDecodeError:
            errors.append("‚ùå Fichier de configuration JSON invalide")
    
    # R√©sum√© final
    print("\n" + "="*60)
    print("üìä R√âSUM√â DE LA VALIDATION")
    print("="*60)
    
    if not errors and not warnings:
        print("üéâ PARFAIT ! L'organisation est compl√®te et fonctionnelle.")
        print("‚úÖ Tous les composants sont correctement organis√©s")
        print("‚úÖ Tous les imports Python fonctionnent")
        print("‚úÖ La configuration est √† jour")
        return True
    
    if errors:
        print(f"‚ùå {len(errors)} ERREUR(S) CRITIQUE(S) :")
        for error in errors:
            print(f"  {error}")
    
    if warnings:
        print(f"‚ö†Ô∏è {len(warnings)} AVERTISSEMENT(S) :")
        for warning in warnings:
            print(f"  {warning}")
    
    if not errors:
        print("\n‚úÖ Organisation fonctionnelle malgr√© les avertissements")
        return True
    else:
        print("\n‚ùå Organisation incompl√®te - corrections n√©cessaires")
        return False


def show_usage_instructions():
    """Affiche les instructions d'utilisation"""
    print("\n" + "="*60)
    print("üìñ INSTRUCTIONS D'UTILISATION")
    print("="*60)
    
    print("\nüöÄ D√©marrage du serveur MCP :")
    print("  # Nouveau serveur (recommand√©)")
    print("  python start_server.py")
    print()
    print("  # Serveur legacy (compatible)")
    print("  python mcp_real_estate_server.py")
    
    print("\nüõ†Ô∏è Scripts utilitaires :")
    print("  # Nettoyage du projet")
    print("  python scripts/cleanup_project.py")
    print()
    print("  # Validation de l'organisation")
    print("  python scripts/validate_organization.py")
    print()
    print("  # Test du service dynamique")
    print("  python scripts/test_dynamic_service.py")
    
    print("\nüìÅ Structure des dossiers :")
    print("  src/          - Code source principal")
    print("  config/       - Configuration MCP")
    print("  scripts/      - Scripts utilitaires")
    print("  docs/         - Documentation")
    print("  logs/         - Fichiers de logs")
    print("  tests/        - Tests unitaires")
    
    print("\nüìö Documentation :")
    print("  README.md                      - Guide principal")
    print("  docs/PROJECT_ORGANIZATION.md   - Organisation d√©taill√©e")
    print("  docs/DEVELOPMENT.md            - Guide d√©veloppeur")


if __name__ == "__main__":
    success = validate_organization()
    show_usage_instructions()
    
    if success:
        print("\nüéØ Le projet MCP Real Estate est parfaitement organis√© !")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è Des corrections sont n√©cessaires.")
        sys.exit(1)
