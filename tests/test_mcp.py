import asyncio
import sys
import os
from typing import Dict, Any, Optional

# Ajout du r√©pertoire source au path Python
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

async def test_enriched() -> None:
    """
    Teste le fonctionnement du MCP enrichi pour la recherche immobili√®re.
    V√©rifie le g√©ocodage et la recherche de propri√©t√©s avec enrichissement des donn√©es.
    """
    try:
        from main import EnrichedRealEstateMCP
        print('‚úÖ MCP enrichi import√© avec succ√®s')
        
        # Initialisation du MCP
        mcp = EnrichedRealEstateMCP()
        print('‚úÖ MCP enrichi correctement instanci√©')
        
        # Test de g√©ocodage
        test_address = 'Paris 11e'
        print(f'\nüîç Test de g√©ocodage pour l\'adresse: {test_address}')
        
        geocoding = mcp.aggregator.geocoding_service
        coords = await geocoding.geocode_address(test_address)
        
        if coords and 'lat' in coords and 'lon' in coords:
            print(f'‚úÖ G√©ocodage r√©ussi: {coords["lat"]:.4f}, {coords["lon"]:.4f}')
        else:
            print('‚ùå √âchec du g√©ocodage: coordonn√©es non trouv√©es')
            return
        
        # Test de recherche enrichie
        print('\nüîç Test de recherche de propri√©t√©s...')
        
        search_params = {
            'location': test_address,
            'min_price': 1000,
            'max_price': 2000,
            'transaction_type': 'rent'
        }
        
        results = await mcp.search_properties(**search_params)
        
        if not results:
            print('‚ö†Ô∏è Aucun r√©sultat trouv√© pour la recherche')
            return
            
        print(f'‚úÖ {len(results)} annonces trouv√©es et enrichies')
        
        # V√©rification de l'enrichissement
        with_coords = sum(1 for r in results if r.get('coordinates'))
        coord_ratio = (with_coords / len(results)) * 100 if results else 0
        print(f'üìç Taux d\'enrichissement des coordonn√©es: {with_coords}/{len(results)} ({coord_ratio:.1f}%)')
        
    except ImportError as e:
        print(f'‚ùå Erreur d\'importation: {e}')
    except Exception as e:
        print(f'‚ùå Erreur inattendue lors du test: {e}')
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    asyncio.run(test_enriched())